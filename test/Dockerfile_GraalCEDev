# syntax=docker/dockerfile:1

# DOCKER_BUILDKIT=1 docker build --progress=plain -t sureshg/graalvm-ce-dev --pull --target graalvm-ce-dev .
FROM debian:stable-slim as graalvm-ce-dev

ARG GRAAL_JDK_VERSION=20
ARG TARGETPLATFORM
ARG BUILDPLATFORM
ARG TARGETOS
ARG TARGETARCH

RUN <<EOT
  set -eux
  echo "Installing GraalVM-CE-Dev ${GRAAL_JDK_VERSION} for ${TARGETPLATFORM}..."
  DEBIAN_FRONTEND=noninteractive
  apt -y update
  apt -y upgrade
  apt -y install \
         --no-install-recommends \
         binutils curl \
         tzdata locales fontconfig ca-certificates \
         gcc zlib1g-dev
  rm -rf /var/lib/apt/lists/* /tmp/*
  apt -y clean
EOT

ENV JAVA_HOME /opt/java/openjdk
ENV PATH $JAVA_HOME/bin:$PATH
# Default to UTF-8 file.encoding
ENV LANG='en_US.UTF-8' LANGUAGE='en_US:en' LC_ALL='en_US.UTF-8'

RUN <<EOT
  set -eux
  case "${TARGETARCH}" in
    amd64|x86_64)
      ARCH='amd64'
      ;;
    aarch64|arm64)
      ARCH='aarch64'
      ;;
    *)
      echo "Unsupported arch: ${TARGETARCH}"
      exit 1
      ;;
  esac;

  #  GRAALVM_PKG=$(curl -s https://api.github.com/repos/graalvm/graalvm-ce-dev-builds/releases/latest \
  #      | grep -i "browser_download_url" \
  #      | grep -i "graalvm-ce-java${GRAAL_JDK_VERSION}-${TARGETOS}-${ARCH}-dev.tar.gz" \
  #      | awk '{ print $2 }' \
  #      | sed 's/,$//'       \
  #      | sed 's/"//g' )     \
  #      ; curl --progress-bar --fail --location --retry 3 -o graalvm-ce-dev.tgz  "${GRAALVM_PKG}"
  #  echo "$downloadSha256 *graalvm-ce-dev.tgz" | sha256sum --strict --check -

  # Download the GraalVM Dev
  GRAALVM_BASE_URL="https://github.com/graalvm/graalvm-ce-dev-builds/releases"
  GRAALVM_RELEASE=$(curl -Ls -o /dev/null -w %{url_effective} "${GRAALVM_BASE_URL}/latest")
  GRAALVM_TAG="${GRAALVM_RELEASE##*/}"
  GRAALVM_PKG="graalvm-ce-java${GRAAL_JDK_VERSION}-${TARGETOS}-${ARCH}-dev.tar.gz"
  DOWNLOAD_URL="${GRAALVM_BASE_URL}/download/${GRAALVM_TAG}/${GRAALVM_PKG}"

  echo "Downloading $DOWNLOAD_URL ..."
  curl --progress-bar --fail --location --retry 3 --url "$DOWNLOAD_URL" --output graalvm-ce-dev.tgz

  mkdir -p "$JAVA_HOME"
  tar --extract \
	  --file graalvm-ce-dev.tgz \
	  --directory "$JAVA_HOME" \
	  --strip-components 1 \
	  --no-same-owner
  rm -f openjdk.tar.gz ${JAVA_HOME}/src.zip

  java --version
  native-image --help
EOT

ENTRYPOINT ["native-image"]
CMD ["--version"]

##### GraalVM NativeImage Build #####
FROM graalvm-ce-dev as graalvm-build

ARG GRAAL_JDK_VERSION

WORKDIR /app
COPY src /app

RUN <<EOT
set -eux
# export TOOLCHAIN_DIR="${PWD}/x86_64-linux-musl-native"
# export CC="${TOOLCHAIN_DIR}/bin/gcc"
# export PATH="${TOOLCHAIN_DIR}/bin:${PATH}"
# native-image --static --libc=musl -m jdk.httpserver -o jwebserver.static
# upx --lzma --best jwebserver.static -o jwebserver.static.upx
javac --enable-preview \
      --release ${GRAAL_JDK_VERSION} \
      -encoding UTF-8 \
      App.java

native-image \
    --static \
    --no-fallback \
    --enable-preview \
    --link-at-build-time \
    --install-exit-handlers \
    --native-image-info \
    -H:+ReportExceptionStackTraces \
    -Djava.awt.headless=false \
    -o httpserver App
EOT


##### Static App Image #####
# DOCKER_BUILDKIT=1 docker build -t sureshg/graalvm-static --no-cache  --pull  --target graalvm-static .
# docker run -it --rm -p 8080:80 sureshg/graalvm-static
# dive sureshg/graalvm-static
FROM scratch as graalvm-static
# FROM gcr.io/distroless/(static-debian11|base-debian11) as graalvm-static
# FROM cgr.dev/chainguard/graalvm-native-image-base:latest as graalvm-static
# RUN ldconfig -p

COPY --from=graalvm-build /app/httpserver /
ENTRYPOINT ["./httpserver"]
EXPOSE 80/tcp